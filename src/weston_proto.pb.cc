// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weston_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "weston_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace dxmtb {
namespace westonapp {

namespace {

const ::google::protobuf::Descriptor* KeyEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MotionEvent_ActionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InputEventProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputEventProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InputEventProto_EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_weston_5fproto_2eproto() {
  protobuf_AddDesc_weston_5fproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "weston_proto.proto");
  GOOGLE_CHECK(file != NULL);
  KeyEvent_descriptor_ = file->message_type(0);
  static const int KeyEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, key_),
  };
  KeyEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyEvent_descriptor_,
      KeyEvent::default_instance_,
      KeyEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyEvent));
  MotionEvent_descriptor_ = file->message_type(1);
  static const int MotionEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionEvent, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionEvent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionEvent, y_),
  };
  MotionEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionEvent_descriptor_,
      MotionEvent::default_instance_,
      MotionEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionEvent));
  MotionEvent_ActionType_descriptor_ = MotionEvent_descriptor_->enum_type(0);
  InputEventProto_descriptor_ = file->message_type(2);
  static const int InputEventProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputEventProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputEventProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputEventProto, key_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputEventProto, motion_event_),
  };
  InputEventProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputEventProto_descriptor_,
      InputEventProto::default_instance_,
      InputEventProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputEventProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputEventProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputEventProto));
  InputEventProto_EventType_descriptor_ = InputEventProto_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_weston_5fproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyEvent_descriptor_, &KeyEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionEvent_descriptor_, &MotionEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputEventProto_descriptor_, &InputEventProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_weston_5fproto_2eproto() {
  delete KeyEvent::default_instance_;
  delete KeyEvent_reflection_;
  delete MotionEvent::default_instance_;
  delete MotionEvent_reflection_;
  delete InputEventProto::default_instance_;
  delete InputEventProto_reflection_;
}

void protobuf_AddDesc_weston_5fproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022weston_proto.proto\022\023com.dxmtb.westonap"
    "p\"\027\n\010KeyEvent\022\013\n\003key\030\001 \002(\r\"\223\001\n\013MotionEve"
    "nt\022@\n\013action_type\030\001 \002(\0162+.com.dxmtb.west"
    "onapp.MotionEvent.ActionType\022\t\n\001x\030\002 \001(\005\022"
    "\t\n\001y\030\003 \001(\005\",\n\nActionType\022\017\n\013ACTION_DOWN\020"
    "\000\022\r\n\tACTION_UP\020\001\"\373\001\n\017InputEventProto\022<\n\004"
    "type\030\001 \002(\0162..com.dxmtb.westonapp.InputEv"
    "entProto.EventType\022\014\n\004time\030\002 \002(\004\0220\n\tkey_"
    "event\030\003 \001(\0132\035.com.dxmtb.westonapp.KeyEve"
    "nt\0226\n\014motion_event\030\004 \001(\0132 .com.dxmtb.wes"
    "tonapp.MotionEvent\"2\n\tEventType\022\020\n\014KeyEv"
    "entType\020\000\022\023\n\017MotionEventType\020\001", 470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "weston_proto.proto", &protobuf_RegisterTypes);
  KeyEvent::default_instance_ = new KeyEvent();
  MotionEvent::default_instance_ = new MotionEvent();
  InputEventProto::default_instance_ = new InputEventProto();
  KeyEvent::default_instance_->InitAsDefaultInstance();
  MotionEvent::default_instance_->InitAsDefaultInstance();
  InputEventProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_weston_5fproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_weston_5fproto_2eproto {
  StaticDescriptorInitializer_weston_5fproto_2eproto() {
    protobuf_AddDesc_weston_5fproto_2eproto();
  }
} static_descriptor_initializer_weston_5fproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyEvent::kKeyFieldNumber;
#endif  // !_MSC_VER

KeyEvent::KeyEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.dxmtb.westonapp.KeyEvent)
}

void KeyEvent::InitAsDefaultInstance() {
}

KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.dxmtb.westonapp.KeyEvent)
}

void KeyEvent::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:com.dxmtb.westonapp.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyEvent_descriptor_;
}

const KeyEvent& KeyEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_weston_5fproto_2eproto();
  return *default_instance_;
}

KeyEvent* KeyEvent::default_instance_ = NULL;

KeyEvent* KeyEvent::New() const {
  return new KeyEvent;
}

void KeyEvent::Clear() {
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.dxmtb.westonapp.KeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.dxmtb.westonapp.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.dxmtb.westonapp.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.dxmtb.westonapp.KeyEvent)
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.dxmtb.westonapp.KeyEvent)
}

::google::protobuf::uint8* KeyEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.dxmtb.westonapp.KeyEvent)
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.dxmtb.westonapp.KeyEvent)
  return target;
}

int KeyEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyEvent_descriptor_;
  metadata.reflection = KeyEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MotionEvent_ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionEvent_ActionType_descriptor_;
}
bool MotionEvent_ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MotionEvent_ActionType MotionEvent::ACTION_DOWN;
const MotionEvent_ActionType MotionEvent::ACTION_UP;
const MotionEvent_ActionType MotionEvent::ActionType_MIN;
const MotionEvent_ActionType MotionEvent::ActionType_MAX;
const int MotionEvent::ActionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MotionEvent::kActionTypeFieldNumber;
const int MotionEvent::kXFieldNumber;
const int MotionEvent::kYFieldNumber;
#endif  // !_MSC_VER

MotionEvent::MotionEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.dxmtb.westonapp.MotionEvent)
}

void MotionEvent::InitAsDefaultInstance() {
}

MotionEvent::MotionEvent(const MotionEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.dxmtb.westonapp.MotionEvent)
}

void MotionEvent::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionEvent::~MotionEvent() {
  // @@protoc_insertion_point(destructor:com.dxmtb.westonapp.MotionEvent)
  SharedDtor();
}

void MotionEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionEvent_descriptor_;
}

const MotionEvent& MotionEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_weston_5fproto_2eproto();
  return *default_instance_;
}

MotionEvent* MotionEvent::default_instance_ = NULL;

MotionEvent* MotionEvent::New() const {
  return new MotionEvent;
}

void MotionEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MotionEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(action_type_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.dxmtb.westonapp.MotionEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.dxmtb.westonapp.MotionEvent.ActionType action_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::dxmtb::westonapp::MotionEvent_ActionType_IsValid(value)) {
            set_action_type(static_cast< ::com::dxmtb::westonapp::MotionEvent_ActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.dxmtb.westonapp.MotionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.dxmtb.westonapp.MotionEvent)
  return false;
#undef DO_
}

void MotionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.dxmtb.westonapp.MotionEvent)
  // required .com.dxmtb.westonapp.MotionEvent.ActionType action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action_type(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.dxmtb.westonapp.MotionEvent)
}

::google::protobuf::uint8* MotionEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.dxmtb.westonapp.MotionEvent)
  // required .com.dxmtb.westonapp.MotionEvent.ActionType action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action_type(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.dxmtb.westonapp.MotionEvent)
  return target;
}

int MotionEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.dxmtb.westonapp.MotionEvent.ActionType action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionEvent::MergeFrom(const MotionEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionEvent::CopyFrom(const MotionEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MotionEvent::Swap(MotionEvent* other) {
  if (other != this) {
    std::swap(action_type_, other->action_type_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionEvent_descriptor_;
  metadata.reflection = MotionEvent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InputEventProto_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputEventProto_EventType_descriptor_;
}
bool InputEventProto_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InputEventProto_EventType InputEventProto::KeyEventType;
const InputEventProto_EventType InputEventProto::MotionEventType;
const InputEventProto_EventType InputEventProto::EventType_MIN;
const InputEventProto_EventType InputEventProto::EventType_MAX;
const int InputEventProto::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InputEventProto::kTypeFieldNumber;
const int InputEventProto::kTimeFieldNumber;
const int InputEventProto::kKeyEventFieldNumber;
const int InputEventProto::kMotionEventFieldNumber;
#endif  // !_MSC_VER

InputEventProto::InputEventProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.dxmtb.westonapp.InputEventProto)
}

void InputEventProto::InitAsDefaultInstance() {
  key_event_ = const_cast< ::com::dxmtb::westonapp::KeyEvent*>(&::com::dxmtb::westonapp::KeyEvent::default_instance());
  motion_event_ = const_cast< ::com::dxmtb::westonapp::MotionEvent*>(&::com::dxmtb::westonapp::MotionEvent::default_instance());
}

InputEventProto::InputEventProto(const InputEventProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.dxmtb.westonapp.InputEventProto)
}

void InputEventProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  key_event_ = NULL;
  motion_event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputEventProto::~InputEventProto() {
  // @@protoc_insertion_point(destructor:com.dxmtb.westonapp.InputEventProto)
  SharedDtor();
}

void InputEventProto::SharedDtor() {
  if (this != default_instance_) {
    delete key_event_;
    delete motion_event_;
  }
}

void InputEventProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputEventProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputEventProto_descriptor_;
}

const InputEventProto& InputEventProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_weston_5fproto_2eproto();
  return *default_instance_;
}

InputEventProto* InputEventProto::default_instance_ = NULL;

InputEventProto* InputEventProto::New() const {
  return new InputEventProto;
}

void InputEventProto::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    type_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
    if (has_key_event()) {
      if (key_event_ != NULL) key_event_->::com::dxmtb::westonapp::KeyEvent::Clear();
    }
    if (has_motion_event()) {
      if (motion_event_ != NULL) motion_event_->::com::dxmtb::westonapp::MotionEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputEventProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.dxmtb.westonapp.InputEventProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.dxmtb.westonapp.InputEventProto.EventType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::dxmtb::westonapp::InputEventProto_EventType_IsValid(value)) {
            set_type(static_cast< ::com::dxmtb::westonapp::InputEventProto_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key_event;
        break;
      }

      // optional .com.dxmtb.westonapp.KeyEvent key_event = 3;
      case 3: {
        if (tag == 26) {
         parse_key_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_motion_event;
        break;
      }

      // optional .com.dxmtb.westonapp.MotionEvent motion_event = 4;
      case 4: {
        if (tag == 34) {
         parse_motion_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.dxmtb.westonapp.InputEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.dxmtb.westonapp.InputEventProto)
  return false;
#undef DO_
}

void InputEventProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.dxmtb.westonapp.InputEventProto)
  // required .com.dxmtb.westonapp.InputEventProto.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional .com.dxmtb.westonapp.KeyEvent key_event = 3;
  if (has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->key_event(), output);
  }

  // optional .com.dxmtb.westonapp.MotionEvent motion_event = 4;
  if (has_motion_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->motion_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.dxmtb.westonapp.InputEventProto)
}

::google::protobuf::uint8* InputEventProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.dxmtb.westonapp.InputEventProto)
  // required .com.dxmtb.westonapp.InputEventProto.EventType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional .com.dxmtb.westonapp.KeyEvent key_event = 3;
  if (has_key_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->key_event(), target);
  }

  // optional .com.dxmtb.westonapp.MotionEvent motion_event = 4;
  if (has_motion_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->motion_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.dxmtb.westonapp.InputEventProto)
  return target;
}

int InputEventProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.dxmtb.westonapp.InputEventProto.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .com.dxmtb.westonapp.KeyEvent key_event = 3;
    if (has_key_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_event());
    }

    // optional .com.dxmtb.westonapp.MotionEvent motion_event = 4;
    if (has_motion_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputEventProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputEventProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputEventProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputEventProto::MergeFrom(const InputEventProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_key_event()) {
      mutable_key_event()->::com::dxmtb::westonapp::KeyEvent::MergeFrom(from.key_event());
    }
    if (from.has_motion_event()) {
      mutable_motion_event()->::com::dxmtb::westonapp::MotionEvent::MergeFrom(from.motion_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputEventProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputEventProto::CopyFrom(const InputEventProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputEventProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_key_event()) {
    if (!this->key_event().IsInitialized()) return false;
  }
  if (has_motion_event()) {
    if (!this->motion_event().IsInitialized()) return false;
  }
  return true;
}

void InputEventProto::Swap(InputEventProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(key_event_, other->key_event_);
    std::swap(motion_event_, other->motion_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputEventProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputEventProto_descriptor_;
  metadata.reflection = InputEventProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace westonapp
}  // namespace dxmtb
}  // namespace com

// @@protoc_insertion_point(global_scope)
