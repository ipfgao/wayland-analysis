// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: weston_proto.proto

#ifndef PROTOBUF_weston_5fproto_2eproto__INCLUDED
#define PROTOBUF_weston_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace dxmtb {
namespace westonapp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_weston_5fproto_2eproto();
void protobuf_AssignDesc_weston_5fproto_2eproto();
void protobuf_ShutdownFile_weston_5fproto_2eproto();

class KeyEvent;
class MotionEvent;
class InputEventProto;

enum MotionEvent_ActionType {
  MotionEvent_ActionType_ACTION_DOWN = 0,
  MotionEvent_ActionType_ACTION_UP = 1
};
bool MotionEvent_ActionType_IsValid(int value);
const MotionEvent_ActionType MotionEvent_ActionType_ActionType_MIN = MotionEvent_ActionType_ACTION_DOWN;
const MotionEvent_ActionType MotionEvent_ActionType_ActionType_MAX = MotionEvent_ActionType_ACTION_UP;
const int MotionEvent_ActionType_ActionType_ARRAYSIZE = MotionEvent_ActionType_ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MotionEvent_ActionType_descriptor();
inline const ::std::string& MotionEvent_ActionType_Name(MotionEvent_ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MotionEvent_ActionType_descriptor(), value);
}
inline bool MotionEvent_ActionType_Parse(
    const ::std::string& name, MotionEvent_ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MotionEvent_ActionType>(
    MotionEvent_ActionType_descriptor(), name, value);
}
enum InputEventProto_EventType {
  InputEventProto_EventType_KeyEventType = 0,
  InputEventProto_EventType_MotionEventType = 1
};
bool InputEventProto_EventType_IsValid(int value);
const InputEventProto_EventType InputEventProto_EventType_EventType_MIN = InputEventProto_EventType_KeyEventType;
const InputEventProto_EventType InputEventProto_EventType_EventType_MAX = InputEventProto_EventType_MotionEventType;
const int InputEventProto_EventType_EventType_ARRAYSIZE = InputEventProto_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InputEventProto_EventType_descriptor();
inline const ::std::string& InputEventProto_EventType_Name(InputEventProto_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InputEventProto_EventType_descriptor(), value);
}
inline bool InputEventProto_EventType_Parse(
    const ::std::string& name, InputEventProto_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InputEventProto_EventType>(
    InputEventProto_EventType_descriptor(), name, value);
}
// ===================================================================

class KeyEvent : public ::google::protobuf::Message {
 public:
  KeyEvent();
  virtual ~KeyEvent();

  KeyEvent(const KeyEvent& from);

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyEvent& default_instance();

  void Swap(KeyEvent* other);

  // implements Message ----------------------------------------------

  KeyEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyEvent& from);
  void MergeFrom(const KeyEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.dxmtb.westonapp.KeyEvent)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 key_;
  friend void  protobuf_AddDesc_weston_5fproto_2eproto();
  friend void protobuf_AssignDesc_weston_5fproto_2eproto();
  friend void protobuf_ShutdownFile_weston_5fproto_2eproto();

  void InitAsDefaultInstance();
  static KeyEvent* default_instance_;
};
// -------------------------------------------------------------------

class MotionEvent : public ::google::protobuf::Message {
 public:
  MotionEvent();
  virtual ~MotionEvent();

  MotionEvent(const MotionEvent& from);

  inline MotionEvent& operator=(const MotionEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionEvent& default_instance();

  void Swap(MotionEvent* other);

  // implements Message ----------------------------------------------

  MotionEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionEvent& from);
  void MergeFrom(const MotionEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MotionEvent_ActionType ActionType;
  static const ActionType ACTION_DOWN = MotionEvent_ActionType_ACTION_DOWN;
  static const ActionType ACTION_UP = MotionEvent_ActionType_ACTION_UP;
  static inline bool ActionType_IsValid(int value) {
    return MotionEvent_ActionType_IsValid(value);
  }
  static const ActionType ActionType_MIN =
    MotionEvent_ActionType_ActionType_MIN;
  static const ActionType ActionType_MAX =
    MotionEvent_ActionType_ActionType_MAX;
  static const int ActionType_ARRAYSIZE =
    MotionEvent_ActionType_ActionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActionType_descriptor() {
    return MotionEvent_ActionType_descriptor();
  }
  static inline const ::std::string& ActionType_Name(ActionType value) {
    return MotionEvent_ActionType_Name(value);
  }
  static inline bool ActionType_Parse(const ::std::string& name,
      ActionType* value) {
    return MotionEvent_ActionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.dxmtb.westonapp.MotionEvent.ActionType action_type = 1;
  inline bool has_action_type() const;
  inline void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  inline ::com::dxmtb::westonapp::MotionEvent_ActionType action_type() const;
  inline void set_action_type(::com::dxmtb::westonapp::MotionEvent_ActionType value);

  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.dxmtb.westonapp.MotionEvent)
 private:
  inline void set_has_action_type();
  inline void clear_has_action_type();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int action_type_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_weston_5fproto_2eproto();
  friend void protobuf_AssignDesc_weston_5fproto_2eproto();
  friend void protobuf_ShutdownFile_weston_5fproto_2eproto();

  void InitAsDefaultInstance();
  static MotionEvent* default_instance_;
};
// -------------------------------------------------------------------

class InputEventProto : public ::google::protobuf::Message {
 public:
  InputEventProto();
  virtual ~InputEventProto();

  InputEventProto(const InputEventProto& from);

  inline InputEventProto& operator=(const InputEventProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InputEventProto& default_instance();

  void Swap(InputEventProto* other);

  // implements Message ----------------------------------------------

  InputEventProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InputEventProto& from);
  void MergeFrom(const InputEventProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef InputEventProto_EventType EventType;
  static const EventType KeyEventType = InputEventProto_EventType_KeyEventType;
  static const EventType MotionEventType = InputEventProto_EventType_MotionEventType;
  static inline bool EventType_IsValid(int value) {
    return InputEventProto_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    InputEventProto_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    InputEventProto_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    InputEventProto_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return InputEventProto_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return InputEventProto_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return InputEventProto_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.dxmtb.westonapp.InputEventProto.EventType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::com::dxmtb::westonapp::InputEventProto_EventType type() const;
  inline void set_type(::com::dxmtb::westonapp::InputEventProto_EventType value);

  // required uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .com.dxmtb.westonapp.KeyEvent key_event = 3;
  inline bool has_key_event() const;
  inline void clear_key_event();
  static const int kKeyEventFieldNumber = 3;
  inline const ::com::dxmtb::westonapp::KeyEvent& key_event() const;
  inline ::com::dxmtb::westonapp::KeyEvent* mutable_key_event();
  inline ::com::dxmtb::westonapp::KeyEvent* release_key_event();
  inline void set_allocated_key_event(::com::dxmtb::westonapp::KeyEvent* key_event);

  // optional .com.dxmtb.westonapp.MotionEvent motion_event = 4;
  inline bool has_motion_event() const;
  inline void clear_motion_event();
  static const int kMotionEventFieldNumber = 4;
  inline const ::com::dxmtb::westonapp::MotionEvent& motion_event() const;
  inline ::com::dxmtb::westonapp::MotionEvent* mutable_motion_event();
  inline ::com::dxmtb::westonapp::MotionEvent* release_motion_event();
  inline void set_allocated_motion_event(::com::dxmtb::westonapp::MotionEvent* motion_event);

  // @@protoc_insertion_point(class_scope:com.dxmtb.westonapp.InputEventProto)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_key_event();
  inline void clear_has_key_event();
  inline void set_has_motion_event();
  inline void clear_has_motion_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::com::dxmtb::westonapp::KeyEvent* key_event_;
  ::com::dxmtb::westonapp::MotionEvent* motion_event_;
  int type_;
  friend void  protobuf_AddDesc_weston_5fproto_2eproto();
  friend void protobuf_AssignDesc_weston_5fproto_2eproto();
  friend void protobuf_ShutdownFile_weston_5fproto_2eproto();

  void InitAsDefaultInstance();
  static InputEventProto* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyEvent

// required uint32 key = 1;
inline bool KeyEvent::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyEvent::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyEvent::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyEvent::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 KeyEvent::key() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.KeyEvent.key)
  return key_;
}
inline void KeyEvent::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:com.dxmtb.westonapp.KeyEvent.key)
}

// -------------------------------------------------------------------

// MotionEvent

// required .com.dxmtb.westonapp.MotionEvent.ActionType action_type = 1;
inline bool MotionEvent::has_action_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionEvent::set_has_action_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionEvent::clear_has_action_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionEvent::clear_action_type() {
  action_type_ = 0;
  clear_has_action_type();
}
inline ::com::dxmtb::westonapp::MotionEvent_ActionType MotionEvent::action_type() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.MotionEvent.action_type)
  return static_cast< ::com::dxmtb::westonapp::MotionEvent_ActionType >(action_type_);
}
inline void MotionEvent::set_action_type(::com::dxmtb::westonapp::MotionEvent_ActionType value) {
  assert(::com::dxmtb::westonapp::MotionEvent_ActionType_IsValid(value));
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:com.dxmtb.westonapp.MotionEvent.action_type)
}

// optional int32 x = 2;
inline bool MotionEvent::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionEvent::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionEvent::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionEvent::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 MotionEvent::x() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.MotionEvent.x)
  return x_;
}
inline void MotionEvent::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:com.dxmtb.westonapp.MotionEvent.x)
}

// optional int32 y = 3;
inline bool MotionEvent::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MotionEvent::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MotionEvent::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MotionEvent::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 MotionEvent::y() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.MotionEvent.y)
  return y_;
}
inline void MotionEvent::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:com.dxmtb.westonapp.MotionEvent.y)
}

// -------------------------------------------------------------------

// InputEventProto

// required .com.dxmtb.westonapp.InputEventProto.EventType type = 1;
inline bool InputEventProto::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InputEventProto::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InputEventProto::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InputEventProto::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::com::dxmtb::westonapp::InputEventProto_EventType InputEventProto::type() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.InputEventProto.type)
  return static_cast< ::com::dxmtb::westonapp::InputEventProto_EventType >(type_);
}
inline void InputEventProto::set_type(::com::dxmtb::westonapp::InputEventProto_EventType value) {
  assert(::com::dxmtb::westonapp::InputEventProto_EventType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.dxmtb.westonapp.InputEventProto.type)
}

// required uint64 time = 2;
inline bool InputEventProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InputEventProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InputEventProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InputEventProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 InputEventProto::time() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.InputEventProto.time)
  return time_;
}
inline void InputEventProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.dxmtb.westonapp.InputEventProto.time)
}

// optional .com.dxmtb.westonapp.KeyEvent key_event = 3;
inline bool InputEventProto::has_key_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InputEventProto::set_has_key_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InputEventProto::clear_has_key_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InputEventProto::clear_key_event() {
  if (key_event_ != NULL) key_event_->::com::dxmtb::westonapp::KeyEvent::Clear();
  clear_has_key_event();
}
inline const ::com::dxmtb::westonapp::KeyEvent& InputEventProto::key_event() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.InputEventProto.key_event)
  return key_event_ != NULL ? *key_event_ : *default_instance_->key_event_;
}
inline ::com::dxmtb::westonapp::KeyEvent* InputEventProto::mutable_key_event() {
  set_has_key_event();
  if (key_event_ == NULL) key_event_ = new ::com::dxmtb::westonapp::KeyEvent;
  // @@protoc_insertion_point(field_mutable:com.dxmtb.westonapp.InputEventProto.key_event)
  return key_event_;
}
inline ::com::dxmtb::westonapp::KeyEvent* InputEventProto::release_key_event() {
  clear_has_key_event();
  ::com::dxmtb::westonapp::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
inline void InputEventProto::set_allocated_key_event(::com::dxmtb::westonapp::KeyEvent* key_event) {
  delete key_event_;
  key_event_ = key_event;
  if (key_event) {
    set_has_key_event();
  } else {
    clear_has_key_event();
  }
  // @@protoc_insertion_point(field_set_allocated:com.dxmtb.westonapp.InputEventProto.key_event)
}

// optional .com.dxmtb.westonapp.MotionEvent motion_event = 4;
inline bool InputEventProto::has_motion_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InputEventProto::set_has_motion_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InputEventProto::clear_has_motion_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InputEventProto::clear_motion_event() {
  if (motion_event_ != NULL) motion_event_->::com::dxmtb::westonapp::MotionEvent::Clear();
  clear_has_motion_event();
}
inline const ::com::dxmtb::westonapp::MotionEvent& InputEventProto::motion_event() const {
  // @@protoc_insertion_point(field_get:com.dxmtb.westonapp.InputEventProto.motion_event)
  return motion_event_ != NULL ? *motion_event_ : *default_instance_->motion_event_;
}
inline ::com::dxmtb::westonapp::MotionEvent* InputEventProto::mutable_motion_event() {
  set_has_motion_event();
  if (motion_event_ == NULL) motion_event_ = new ::com::dxmtb::westonapp::MotionEvent;
  // @@protoc_insertion_point(field_mutable:com.dxmtb.westonapp.InputEventProto.motion_event)
  return motion_event_;
}
inline ::com::dxmtb::westonapp::MotionEvent* InputEventProto::release_motion_event() {
  clear_has_motion_event();
  ::com::dxmtb::westonapp::MotionEvent* temp = motion_event_;
  motion_event_ = NULL;
  return temp;
}
inline void InputEventProto::set_allocated_motion_event(::com::dxmtb::westonapp::MotionEvent* motion_event) {
  delete motion_event_;
  motion_event_ = motion_event;
  if (motion_event) {
    set_has_motion_event();
  } else {
    clear_has_motion_event();
  }
  // @@protoc_insertion_point(field_set_allocated:com.dxmtb.westonapp.InputEventProto.motion_event)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace westonapp
}  // namespace dxmtb
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::dxmtb::westonapp::MotionEvent_ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::dxmtb::westonapp::MotionEvent_ActionType>() {
  return ::com::dxmtb::westonapp::MotionEvent_ActionType_descriptor();
}
template <> struct is_proto_enum< ::com::dxmtb::westonapp::InputEventProto_EventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::dxmtb::westonapp::InputEventProto_EventType>() {
  return ::com::dxmtb::westonapp::InputEventProto_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_weston_5fproto_2eproto__INCLUDED
